line-length = 88
indent-width = 4
extend-exclude = [".venv*"]
preview = true

[format]
docstring-code-format = true
docstring-code-line-length = 79
preview = true
skip-magic-trailing-comma = true

[lint]
typing-modules = ["collections.abc"]
preview = true

# Enable rules:
extend-select = [
    "F", # pyflakes
    "N", # pep8-naming
    "E", # pycodestyle
    "W", # pycodestyle
    # "D",   # pydocstyle
    # "DOC", # pydoclint
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    # "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib-pth
    "PLC",  # pytlint (PL C/E/R/W)
    "PLE",
    "PLR",
    "PLW",
    "PERF", # perflint
    "RUF",  # Ruff-specific rules
]

# extend-select = []
ignore = [
    "E501",    # Line too long (95 > 88 characters)
    "S101",    # Use of `assert` detected
    "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
    "B027",    # Allow non-abstract empty methods in abstract base classes
    # "PLR0913", # Too many statements
    "D100", # Missing docstring in public module
]


#  A list of check code prefixes to consider autofix-able.
extend-fixable = ["UP", "B", "I", "TCH"]
unfixable = [
    "F401", # Don't touch unused imports
]


[lint.per-file-ignores]
"**/tests/**/*.py" = [
    "PLR2004",
    "S101",
    "TID252",
    "D100",
] # Tests can use magic values, assertions, and relative imports

[lint.pydocstyle]
convention = "pep257"

# [lint.pyupgrade]
# # Preserve types, even if a file imports `from __future__ import annotations`.
# keep-runtime-typing = true

[lint.isort]
required-imports = ["from __future__ import annotations"]
section-order = [
    "future",
    "typing",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
    "testing",
]

[lint.isort.sections]
typing = [
    "typing",
    "typing_extensions",
    "collections.abc",
    # libraries that are not in the standard library
    "xattrs._compat.typing",
    "xattrs._typing",
    "xattrs.typing",
]
testing = ['pytest', "hypothesis"]
