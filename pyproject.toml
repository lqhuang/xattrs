[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "xattrs"
version = "0.0.1"
description = 'eXtensible serializing and deserializing tools for attrs'
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD-3-Clause" }
keywords = ["attrs", "cattrs", "serde", "json", "schema"]
authors = [{ name = "Lanqing Huang", email = "lqhuang@outlook.com" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "License :: OSI Approved :: BSD License",
  "Operating System :: POSIX",
  "Typing :: Typed",
]
dependencies = ["attrs", "typing_extensions", "cattrs"]

[project.optional-dependencies]
yaml = ["strictyaml"]
toml = ["tomlkit"]
ujson = ["ujson"]
msgpack = ["msgspec"]
cloudpickle = ["cloudpickle"]
all = [
  "xattrs[toml]",
  "xattrs[yaml]",
  "xattrs[ujson]",
  "xattrs[msgpack]",
  "xattrs[cloudpickle]",
]
test = [
  'cloudpickle; python_implementation == "CPython"',
  "hypothesis",
  "pympler",
  "pytest>=4.3.0",
  'mypy>=1.1.1; python_implementation == "CPython"',
  'pytest-mypy-plugins; python_implementation == "CPython"',
  "coverage[toml]",
]
docs = [
  "towncrier",
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-notfound-page",
  "sphinx-copybutton",
  "sphinx-autobuild",
  "sphinxcontrib-towncrier",
  "sphinx-autodoc-typehints",
  "sphinxext-opengraph",
]
linter = ['mypy', 'black', 'isort', 'ruff', "pyupgrade", "pre-commit"]
build = ["pip", "build>=1.0.0", "wheel", "pdm", "pdm-backend"]
dev = ["xattrs[linter,test,build,docs]"]


[project.urls]
Documentation = "https://github.com/lqhuang/xattrs#readme"
Issues = "https://github.com/lqhuang/xattrs/issues"
Source = "https://github.com/lqhuang/xattrs"

# ## Build
[tool.hatch.build.targets.wheel]
packages = ["src/xattrs"]

[tool.pdm.build]
package-dir = "src"
source-includes = [
  "docs",
  "src",
  "tests",
  "CHANGELOG.md",
  "LICENSE",
  "Makefile",
  "pyproject.toml",
  "README.md",
]

## Pytest
[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"

[tool.check-wheel-contents]
toplevel = ["xattrs"]

## Formatter
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
known_typing = [
  "types",
  "typing",
  "typing_extensions",
  "collections.abc",
  "xattrs._compat.typing",
  "xattrs._compat.typing_internal",
]
sections = [
  "FUTURE",
  "TYPING",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "LOCALFOLDER",
]

## Linter
[tool.mypy]
## doc: https://mypy.readthedocs.io/en/stable/config_file.html
strict = true
## Miscellaneous
warn_unused_configs = true
## Configuring error messages
show_column_numbers = true
show_error_context = true
show_error_codes = true
# pretty = true  # disable for IDE parser; try add cli option in Makefile
## Incremental mode
cache_fine_grained = true
## Advanced options
warn_incomplete_stub = true

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#main-pyright-config-options
typeCheckingMode = "basic"
reportGeneralTypeIssues = false
# reportPrivateUsage = false

[tool.ruff]
line-length = 88

# Enable rules:
# Pyflakes (F), pycodestyle (E, W), pydocstyle (D), pyupgrade (UP),
# flake8-bandit (S), flake8-bugbear (B), flake8-comprehensions (C4), flake8-datetimez (DTZ), flake8-pytest-style (PT)
# Pylint (PLC, PLE, PLR, PLW), Ruff-specific rules (RUF)
select = ["F", "E", "W", "UP", "S", "B", "C4", "DTZ", "PT"]
extend-select = ["PLC", "PLE", "PLR", "PLW", "RUF"]

ignore = [
  "E501",    # Line too long (95 > 88 characters)
  "S101",    # Use of `assert` detected
  "RUF100",  # Unused `noqa` directive for: E305 (not implemented)
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
  "PLR0913", # Too many statements
  "C408",
  "B027",    # Allow non-abstract empty methods in abstract base classes
  "PLC0414", # Import alias does not rename original package
]

fix = false
#  A list of check code prefixes to consider autofix-able.
fixable = ["F", "E711", "UP", "B"]
unfixable = [
  "I",
  "F401", # Don't touch unused imports
]

ignore-init-module-imports = true

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # imported but unused
"tests/**/*" = [
  "PLR2004",
  "S101",
  "TID252",
] # Tests can use magic values, assertions, and relative imports
